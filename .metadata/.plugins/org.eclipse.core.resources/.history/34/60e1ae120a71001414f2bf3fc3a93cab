package com.flowmellow.justexample.services;

import java.io.IOException;
import java.util.List;
import java.util.Locale;

import com.flowmellow.justexample.Config;
import com.flowmellow.justexample.activities.listeners.LocationListener;
import com.google.android.gms.location.LocationClient;

import android.app.Activity;
import android.app.Service;
import android.content.Intent;
import android.location.Address;
import android.location.Geocoder;
import android.location.Location;
import android.os.Binder;
import android.os.IBinder;
import android.util.Log;

public class LocationService extends Service {

	// Binder given to clients
	private final IBinder binder = new LocationBinder();

	public class LocationBinder extends Binder {

		public LocationService getService() {
			return LocationService.this;
		}
	}

	@Override
	public IBinder onBind(Intent intent) {
		return binder;
	}

	public void requestPostcodeByLocation(final LocationClient locationClient, final Activity activity, final LocationListener loctionListener) {
		new Thread(new Runnable() {
			public void run() {
				final Location location = locationClient.getLastLocation();
				
				if(location != null) {
					final String postcode = getPostCode(location, activity);
					postcodeCallback(activity, loctionListener, postcode);
				} else {
					Log.e(Config.LOG_TAG, "Location is available");
				}
			}
		}).start();
	}
	
	private void postcodeCallback(final Activity activity, final LocationListener loctionListener, final String postcode) {
		activity.runOnUiThread(new Runnable() {
			public void run() {
				loctionListener.postcodeCallback(postcode);
			}
		});
	}
	
	private String getPostCode(final Location location, final Activity activity) {
		String postcode = null;
		List<Address> addresses = null;

		try {
			final Geocoder geocoder = new Geocoder(activity, Locale.getDefault());
			addresses = geocoder.getFromLocation(location.getLatitude(), location.getLongitude(), 1);
		} catch (IOException e) {
			Log.e(Config.LOG_TAG, "IO Exception in getFromLocation(): " + e.getMessage());
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			String errorString = "Illegal arguments " +
					Double.toString(location.getLatitude()) +
					" , " +
					Double.toString(location.getLongitude()) +
					" passed to address service : " + 
					e.getMessage();
			Log.e(Config.LOG_TAG, errorString);
			e.printStackTrace();
		}

		if (addresses != null && addresses.size() > 0) {
			postcode =  addresses.get(0).getPostalCode();
		}
		return postcode;
	}
}