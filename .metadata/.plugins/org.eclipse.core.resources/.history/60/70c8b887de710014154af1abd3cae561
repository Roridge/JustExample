package com.flowmellow.justexample.activities;

import com.flowmellow.justexample.Config;
import com.flowmellow.justexample.R;
import com.flowmellow.justexample.activities.listeners.CustomLocationListener;
import com.flowmellow.justexample.services.LocationService;
import com.flowmellow.justexample.services.LocationService.LocationBinder;

import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ProgressBar;
import android.widget.Spinner;
import android.widget.Toast;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.ComponentName;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentSender;
import android.content.ServiceConnection;
import android.location.Location;
import android.location.LocationManager;
import android.os.Bundle;
import android.os.IBinder;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesClient;
import com.google.android.gms.location.LocationClient;
import com.google.android.gms.location.LocationListener;

public class JustMainActivity extends Activity implements OnClickListener, LocationListener, CustomLocationListener, GooglePlayServicesClient.ConnectionCallbacks,
		GooglePlayServicesClient.OnConnectionFailedListener {

	private final static int CONNECTION_FAILURE_RESOLUTION_REQUEST = 9000;

	private ImageButton locationImageButton;
	private ImageButton searchImageButton;
	private EditText searchEditText;
	private ProgressBar locationProgressBar;
	
	private LocationClient locationClient;
	private LocationService locationService;
	private LocationManager locationManager;
	private ServiceConnection locationServiceConnection;
	private boolean isLocationClientConnected = false;
	private boolean isLocationServiceBound = false;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_just_main);

		locationClient = new LocationClient(this, this, this);
		locationManager = (LocationManager) getSystemService( Context.LOCATION_SERVICE );
		locationImageButton = (ImageButton) findViewById(R.id.locationImageButton);
		searchImageButton = (ImageButton) findViewById(R.id.searchImageButton);
		searchEditText = (EditText) findViewById(R.id.searchEditText);
		locationProgressBar = (ProgressBar) findViewById(R.id.locationProgressBar);

		locationImageButton.setOnClickListener(this);
		searchImageButton.setOnClickListener(this);

		locationServiceConnection = new LocationServiceConnection();
	}

	@Override
	protected void onStart() {
		super.onStart();

		// connect to google play services location client
		locationClient.connect();

		// Bind to DefaultLocationService
		final Intent intent = new Intent(this, LocationService.class);
		bindService(intent, locationServiceConnection, Context.BIND_AUTO_CREATE);
	}

	@Override
	protected void onStop() {
		super.onStop();

		// disconnect to google play services location client
		locationClient.disconnect();

		// Unbind from DefaultLocationService
		if (isLocationServiceBound) {
			unbindService(locationServiceConnection);
			isLocationServiceBound = false;
		}
	}

	@Override
	public void onClick(View v) {

		switch (v.getId()) {

		case R.id.locationImageButton:
			requestPostcode();
			break;

		case R.id.searchImageButton:
			requestRestaurantsByLocation();
			break;

		default:
			// do nothing
			break;
		}
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {

		switch (requestCode) {

		case CONNECTION_FAILURE_RESOLUTION_REQUEST:

			switch (resultCode) {

			/* If the result code is Activity.RESULT_OK, try to connect again */
			case Activity.RESULT_OK:

				if (!isLocationClientConnected) {
					locationClient.connect();
				}
				break;
			}
		}
	}

	@Override
	public void onConnectionFailed(ConnectionResult connectionResult) {
		isLocationClientConnected = false;

		if (connectionResult.hasResolution()) {

			try {
				// Start an Activity that tries to resolve the error
				connectionResult.startResolutionForResult(this, CONNECTION_FAILURE_RESOLUTION_REQUEST);
			} catch (IntentSender.SendIntentException e) {
				Log.w(Config.LOG_TAG, "Google Play services has cancelled the orignal PendingIntent " + e.getMessage());
				e.printStackTrace();
			}
		}
	}

	@Override
	public void onConnected(Bundle arg0) {
		isLocationClientConnected = true;
	}

	@Override
	public void onDisconnected() {
		isLocationClientConnected = false;
	}
	
	@Override
	public void onLocationChanged(Location location) {
		
		String postcode = null;
		
		if(location != null) {
			postcode = locationService.getPostCode(this, location);
		}
		postcodeCallback(postcode);
	}

	/**
	 * Display postcode requested in {@code searchEditText}, hide spinner.
	 */
	@Override
	public void postcodeCallback(String postcode) {

		locationProgressBar.setVisibility(View.GONE);
		
		if (postcode != null) {
			searchEditText.setText(postcode);
		}
	}

	/**
	 * Request postcode, show spinner.
	 */
	private void requestPostcode() {
		
		if (locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {
		
		locationProgressBar.setVisibility(View.VISIBLE);
		
			if (isLocationServiceBound) {
				locationService.requestPostcodeByLocation(this, this, this, locationClient);
			} else {
				Log.d(Config.LOG_TAG, "location service was not bound");
			} 
		} else {
			 buildAlertMessageNoGps();
		}
	}

	/**
	 * Start the {@link JustDisplayRestaurantsActivity} with postcode in
	 * {@code searchEditText}
	 */
	private void requestRestaurantsByLocation() {
		String postcode = searchEditText.getText().toString();

		if (postcode != null && !postcode.isEmpty()) {
			// remove any spaces
			postcode = postcode.replaceAll("\\s+", "");

			// restrict strings larger than max postcode
			if (postcode.length() > Config.MAX_POSTCODE_LENGTH) {
				postcode = postcode.substring(0, Config.MAX_POSTCODE_LENGTH);
			}

			// Explicit intent with postcode to display restaurants
			final Intent intent = new Intent(this, JustDisplayRestaurantsActivity.class);
			intent.putExtra(JustDisplayRestaurantsActivity.POSTCODE_INTENT, postcode);
			startActivity(intent);

		} else {
			Toast.makeText(this, getString(R.string.helper_missing_postcode), Toast.LENGTH_LONG).show();
		}
	}

	private class LocationServiceConnection implements ServiceConnection {

		@Override
		public void onServiceConnected(ComponentName className, IBinder service) {
			LocationBinder binder = (LocationBinder) service;
			locationService = binder.getService();
			isLocationServiceBound = true;
		}

		@Override
		public void onServiceDisconnected(ComponentName arg0) {
			isLocationServiceBound = false;
		}
	}
	
	  private void buildAlertMessageNoGps() {
		    final AlertDialog.Builder builder = new AlertDialog.Builder(this);
		    builder.setMessage("Your GPS seems to be disabled, do you want to enable it?")
		           .setCancelable(false)
		           .setPositiveButton("Yes", new DialogInterface.OnClickListener() {
		               public void onClick(@SuppressWarnings("unused") final DialogInterface dialog, @SuppressWarnings("unused") final int id) {
		                   startActivity(new Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS));
		               }
		           })
		           .setNegativeButton("No", new DialogInterface.OnClickListener() {
		               public void onClick(final DialogInterface dialog, @SuppressWarnings("unused") final int id) {
		                    dialog.cancel();
		               }
		           });
		    final AlertDialog alert = builder.create();
		    alert.show();
		}
}