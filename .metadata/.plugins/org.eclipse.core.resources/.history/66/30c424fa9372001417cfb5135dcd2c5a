package com.flowmellow.justexample.activities.adapters;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Collections;
import java.util.Map;
import java.util.WeakHashMap;

import android.content.Context;
import android.graphics.Bitmap;
import android.widget.ImageView;

public class ImageLoader {

	private ImageCache imageCache = new ImageCache();
	private Map<ImageView, String> imageViewsToUrlMap = Collections.synchronizedMap(new WeakHashMap<ImageView, String>());

	public ImageLoader(Context applicationContext) {
		// TODO Auto-generated constructor stub
	}

	public void displayImage(ImageView imageView, String url) {
		imageViewsToUrlMap.put(imageView, url);
		final Bitmap image = imageCache.getImage(url);

		if (image == null) {
			queueForLoad(imageView, url);
		} else {
			imageView.setImageBitmap(image);
		}
	}

	private void queueForLoad(ImageView imageView, String url) {

		final ImageLoaderQueueItem queueItem = new ImageLoaderQueueItem(imageView, url);

	}

	class ImageRetriever implements Runnable {

		private final ImageLoaderQueueItem queueItem;

		protected ImageRetriever(final ImageLoaderQueueItem queueItem) {
			this.queueItem = queueItem;
		}

		@Override
		public void run() {

			final String url = queueItem.getUrl();
			final Bitmap image = getBitmap(url);

			if (image != null) {
				cache();

				display();
			}

		}

	}

	private void cache() {

	}

	private void display() {

	}

	private Bitmap getBitmap(String url) {
		File f = fileCache.getFile(url);

		// from SD cache
		Bitmap b = decodeFile(f);
		if (b != null)
			return b;

		// from web
		try {
			Bitmap bitmap = null;
			URL imageUrl = new URL(url);
			HttpURLConnection conn = (HttpURLConnection) imageUrl.openConnection();
			conn.setConnectTimeout(30000);
			conn.setReadTimeout(30000);
			conn.setInstanceFollowRedirects(true);
			InputStream is = conn.getInputStream();
			OutputStream os = new FileOutputStream(f);
			Utils.CopyStream(is, os);
			os.close();
			conn.disconnect();
			bitmap = decodeFile(f);
			return bitmap;
		} catch (Throwable ex) {
			ex.printStackTrace();
			if (ex instanceof OutOfMemoryError)
				memoryCache.clear();
			return null;
		}
	}

}
