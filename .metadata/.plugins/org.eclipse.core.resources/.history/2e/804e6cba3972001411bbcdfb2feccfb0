package com.flowmellow.justexample.activities.test;

import com.flowmellow.justexample.R;
import com.flowmellow.justexample.activities.HomeActivity;

import android.content.Context;
import android.location.LocationManager;
import android.test.ActivityInstrumentationTestCase2;
import android.test.RenamingDelegatingContext;
import android.test.mock.MockContext;
import android.test.suitebuilder.annotation.SmallTest;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ProgressBar;

public class HomeActivityTest extends ActivityInstrumentationTestCase2<HomeActivity> {

	private HomeActivity activity;
	private MockContext mockContext;
	private RenamingDelegatingContext renamingDelegatingContext;

	public HomeActivityTest() {
		super(HomeActivity.class);
	}

	@Override
	protected void setUp() throws Exception {
		super.setUp();
		activity = getActivity();
		mockContext = new HomeMockContext();
		renamingDelegatingContext = new RenamingDelegatingContext(mockContext, "test");
		
	}
	
	@SmallTest
	public void testSearchEditTextViewIsVisible() {
		final EditText searchEditText = (EditText) activity.findViewById(R.id.searchEditText);
		final int searchEditTextVisability = searchEditText.getVisibility();
		final String errorMessage = "search edit text view was not visible";
		assertEquals(errorMessage, View.VISIBLE, searchEditTextVisability);
	}

	@SmallTest
	public void testLocationImageButtonIsVisible() {
		final ImageButton locationImageButton = (ImageButton) activity.findViewById(R.id.locationImageButton);
		final int locationImageButtonVisability = locationImageButton.getVisibility();
		final String errorMessage = "location image button was not visible";
		assertEquals(errorMessage, View.VISIBLE, locationImageButtonVisability);
	}

	@SmallTest
	public void testSearchImageButtonIsVisible() {
		final ImageButton searchImageButton = (ImageButton) activity.findViewById(R.id.searchImageButton);
		final int searchImageButtonVisability = searchImageButton.getVisibility();
		final String errorMessage = "search image button was not visible";
		assertEquals(errorMessage, View.VISIBLE, searchImageButtonVisability);
	}

	@SmallTest
	public void testLocationProgressBarIsGone() {
		final ProgressBar locationProgressBar = (ProgressBar) activity.findViewById(R.id.locationProgressBar);
		final int searchImageButtonVisability = locationProgressBar.getVisibility();
		final String errorMessage = "location progress bar should be hidden on creation";
		assertEquals(errorMessage, View.GONE, searchImageButtonVisability);
	}
	
	public void testNoLocationServiceDialog() {
		
		
		activity.requestPostcode();
	}
	
	
	public class HomeMockContext extends MockContext {
		
		@Override
		public Object getSystemService(String name) {
			
			if(name.equals(Context.LOCATION_SERVICE)) {
				LocationManager locationManager = (LocationManager) super.getSystemService(name);
				locationManager.setTestProviderStatus(LocationManager.GPS_PROVIDER, 0, null, 0L);
				return locationManager;
			}
			
			return null;
		}
	}
}
